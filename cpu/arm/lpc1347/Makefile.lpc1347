### Code common for all ARM CPUs
CONTIKI_CPU_ARM=$(CONTIKI)/cpu/arm/

### Define the CPU directory
CONTIKI_CPU=$(CONTIKI_CPU_ARM)/lpc1347

### Define the source files we have in the STM32F4 port
#include $(CONTIKI_CPU)/lib/lib.mk
#include $(CONTIKI_CPU)/lib/CMSIS/DSP_Lib/cmsis.mk

#CONTIKI_CPU_DIRS =	. $(STM32_CORE) $(STM32_CONF) $(CMSIS) $(STDPERIPH_DIR) \
#					$(USB_OTG_PATH) $(USB_DEVICE_CORE_PATH) \
#					$(USB_DEVICE_CLASS_CDC_PATH) \
#					$(CMSIS_DIR) $(CMSIS_INCLUDE)

CONTIKI_CPU_DIRS = . 
CONTIKI_CPU_DIRS += ./common/CMSIS $(CONTIKI_CPU_ARM)/common/

LPC1347 = clock.c system_LPC13Uxx.c rtimer-arch.c cr_startup_lpc13u.c gpio.c syscalls.c

#TARGETLIBS =	$(STDPERIPH_SRC) $(USB_OTG_SRC) $(USB_DEVICE_CORE_SRC) \
#				$(USB_DEVICE_CLASS_CDC_SRC) random.c watchdog.c \
#				uip_arch.c me.c me_tabs.c slip.c crc16.c \
#				debug-buffer.c

TARGETLIBS =  watchdog.c random.c

#ifeq ($(USE_DSP_LIB),1)
#TARGETLIBS += $(CMSIS_SRC)
#endif

#ifeq ($(SLIP_USB_CDC),1)
#TARGETLIBS += slip-usb-cdc.c
#endif

#INTERRUPT_SOURCEFILES += interrupts-cpu.c syscalls.c

INTERRUPT_SOURCEFILES += syscalls.c

#USB = usb_bsp.c usbd_cdc_vcp.c usbd_desc.c usbd_usr.c

CONTIKI_TARGET_SOURCEFILES += $(LPC1347) $(SYSAPPS) \
			$(TARGETLIBS) #$(UIPDRIVERS) $(USB)

CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

THREADS =

### Compiler definitions
CC       = arm-none-eabi-gcc
LD       = arm-none-eabi-gcc
AS       = arm-none-eabi-as
AR       = arm-none-eabi-ar
NM       = arm-none-eabi-nm
OBJCOPY  = arm-none-eabi-objcopy
STRIP    = arm-none-eabi-strip
SIZE     = arm-none-eabi-size

XSLTPROC=xsltproc

INTERRUPT_OBJECTFILES = $(INTERRUPT_SOURCEFILES:.c=.o)
PROJECT_OBJECTFILES += ${addprefix $(OBJECTDIR)/,$(CONTIKI_TARGET_MAIN:.c=.o)}

# The linker script
LINKERSCRIPT = $(CONTIKI_CPU)/lpc1347.ld

# Use qstlink or OpenOCD
#PROG=qstlink
PROG=openocd

ARCH_FLAGS = -mlittle-endian -mthumb -mcpu=cortex-m3

# Hard float
#ARCH_FLAGS += -fsingle-precision-constant -Wdouble-promotion
#ARCH_FLAGS += -mfpu=fpv4-sp-d16 -mfloat-abi=softfp
#ARCH_FLAGS += -mfpu=fpv4-sp-d16 -mfloat-abi=hard
# or soft float
#ARCH_FLAGS += -msoft-float

CFLAGSNO = -I. -I$(CONTIKI)/core -I$(CONTIKI_CPU) -I$(CONTIKI_CPU)/loader -I$(CONTIKI_CPU_ARM)/common/CMSIS \
           -I$(CONTIKI)/platform/$(TARGET) \
           ${addprefix -I,$(APPDIRS)}  -DWITH_ASCII -DMCK=$(MCK) \
           -Wall $(ARCH_FLAGS) -g \
           -Wno-strict-aliasing

# CMSIS lib
#CFLAGS += -D__FPU_PRESENT=1 -D__FPU_USED=1 -DARM_MATH_CM4 -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING

CFLAGS += $(CFLAGSNO) -DRUN_AS_SYSTEM -DROM_RUN
LDFLAGS += -L $(CONTIKI_CPU) -T $(LINKERSCRIPT) \
           -nostartfiles

ifeq ($(DEBUG_BUILD),1)
CFLAGS  += -O0 -g
else
CFLAGS  += -O2
endif

CDEPFLAGS = $(CFLAGS) -D __MAKING_DEPS__

### Setup directory search path for source files

CUSTOM_RULE_C_TO_OBJECTDIR_O=yes
CUSTOM_RULE_C_TO_O=yes

%.o: %.c
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.c | $(OBJECTDIR)
	$(CC) $(CFLAGS) -c $< -o $@


CUSTOM_RULE_S_TO_OBJECTDIR_O = yes
%.o: %.S
	$(CC) $(CFLAGS) $< -c

$(OBJECTDIR)/%.o: %.S | $(OBJECTDIR)
	$(CC) $(CFLAGS) $< -c  -o $@


CUSTOM_RULE_C_TO_CO=yes

%.co: %.c
	$(CC) $(CFLAGS) $< -c -o $@

CUSTOM_RULE_C_TO_CE=yes

%.ce: %.o
	$(LD) $(LDFLAGS) --relocatable -T $(CONTIKI_CPU)/merge-rodata.ld $< -o $@
	$(STRIP) -K _init -K _fini --strip-unneeded -g -x $@

CUSTOM_RULE_LINK=yes

%-stripped.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@
	$(STRIP) --strip-unneeded -g -x $@

%-stripped.o: %.o
	$(STRIP) --strip-unneeded -g -x -o $@ $<

%.o: ${CONTIKI_TARGET}/loader/%.S
	$(AS) -o $(notdir $(<:.S=.o)) $<

%-nosyms.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) # $(OBJECTDIR)/empty-symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)


%.ihex: %.$(TARGET)
	$(OBJCOPY) $^ -O ihex $@

%.bin: %.$(TARGET)
	$(OBJCOPY) -O binary $< $@

.PHONY: symbols.c
ifdef CORE
%.$(TARGET): %.co $(PROJECT_OBJECTFILES) contiki-$(TARGET).a $(STARTUP) $(OBJECTDIR)/symbols.o
	$(CC) $(LDFLAGS) $(CFLAGS) -nostartfiles -o $@ $(filter-out %.a,$^) $(filter %.a,$^) -lc $(filter %.a,$^)

symbols.c: $(CORE)
	$(NM) $< | awk -f $(CONTIKI_CPU)/builtins.awk -f ../../tools/mknmlist > symbols.c

else
%.$(TARGET): %-nosyms.$(TARGET)
	ln -sf $< $@
endif

empty-symbols.c:
	cp ${CONTIKI}/tools/empty-symbols.c symbols.c
	cp ${CONTIKI}/tools/empty-symbols.h symbols.h


# Don't use core/loader/elfloader.c, use elfloader-otf.c instead
$(OBJECTDIR)/elfloader.o: | $(OBJECTDIR)
	echo -n >$@

clean: clean_cpu

clean_cpu:
	-rm -rf $(BUILTSRCDIR)

.PRECIOUS: %-nosyms.$(TARGET)
